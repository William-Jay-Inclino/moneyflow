generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

model User {
    id                 String    @id @default(uuid()) @db.Uuid
    email              String    @unique
    password           String
    is_active          Boolean   @default(true)
    email_verified     Boolean   @default(false)
    email_verify_token String?   @unique
    registered_at      DateTime  @default(now()) @db.Timestamptz

    // Relations
    user_expenses   UserExpense[]
    user_income     UserIncome[]
    user_accounts   UserAccount[]

    @@index([is_active])
    @@index([registered_at])
    @@index([email_verified])
    @@map("users")
}

model UserAccount {
    id         String   @id @default(uuid()) @db.Uuid
    user_id    String   @db.Uuid
    name       String
    balance    Decimal  @db.Decimal(10, 2)
	notes      String?  @db.Text
    created_at DateTime @default(now()) @db.Timestamptz
    updated_at DateTime @updatedAt @db.Timestamptz

    // Relations
    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@index([user_id])
    @@map("user_accounts")
}

model Category {
	id         Int          @id @default(autoincrement())
	name       String
	type       CategoryType
	color      String
	icon       String
	is_default Boolean      @default(false)

	// Relations
	user_expenses UserExpense[]
	user_incomes UserIncome[]

    @@index([type])

	@@map("categories")
}

enum CategoryType {
	INCOME
	EXPENSE
}
model UserExpense {
	id           String   @id @default(uuid()) @db.Uuid
	user_id      String   @db.Uuid
	created_at   DateTime @default(now()) @db.Timestamptz
	expense_date DateTime @db.Timestamptz
	category_id  Int
	cost         Decimal  @db.Decimal(10, 2)
	notes        String?

	// Relations
	user     User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
	category Category @relation(fields: [category_id], references: [id], onDelete: Restrict)

	@@index([user_id])
	@@index([user_id, expense_date])
	@@map("user_expenses")
}

model UserIncome {
	id          String   @id @default(uuid()) @db.Uuid
	user_id     String   @db.Uuid
	created_at  DateTime @default(now()) @db.Timestamptz
	income_date DateTime @db.Timestamptz
	category_id Int
	amount      Decimal  @db.Decimal(10, 2)
	notes       String?

	// Relations
	user     User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
	category Category @relation(fields: [category_id], references: [id], onDelete: Restrict)

	@@index([user_id])
	@@index([user_id, income_date])
	@@map("user_income")
}


